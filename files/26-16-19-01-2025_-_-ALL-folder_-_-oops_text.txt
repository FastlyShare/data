Slide 1: Title Slide
Title:
Object-Oriented Programming System (OOPS)
Subtitle:
The Four Pillars of OOPS with Examples

Slide 2: What is OOPS?
Definition:
A programming paradigm based on "objects" that contain data and behavior.

Key Features:

Models real-world entities
Promotes code modularity, reusability, and scalability
Slide 3: Four Pillars of OOPS
Encapsulation
Inheritance
Polymorphism
Abstraction
Slide 4: Encapsulation
Definition:
Wrapping data and methods into a single unit (class) to restrict unauthorized access.

Key Idea:
Use access modifiers (private, protected, public).

Example:

java
Copy
Edit
class BankAccount {
    private double balance;
    public double getBalance() { return balance; }
    public void deposit(double amount) {
        if (amount > 0) balance += amount;
    }
}
Slide 5: Inheritance
Definition:
A child class inherits fields and methods from a parent class.

Key Benefit:
Promotes code reuse.

Example:

java
Copy
Edit
class Animal {
    void eat() { System.out.println("Animal eats."); }
}
class Dog extends Animal {
    void bark() { System.out.println("Dog barks."); }
}
Slide 6: Polymorphism
Definition:
Methods can behave differently based on the object that calls them.

Types:

Compile-Time (Method Overloading): Same method name, different parameters.
Runtime (Method Overriding): Child class modifies a parent method.
Example (Overloading):

java
Copy
Edit
class Calculator {
    int add(int a, int b) { return a + b; }
    double add(double a, double b) { return a + b; }
}
Slide 7: Abstraction
Definition:
Hiding implementation details and showing only essential features.

Achieved Through:

Abstract classes
Interfaces
Example:

java
Copy
Edit
abstract class Shape {
    abstract void draw();
}
class Circle extends Shape {
    void draw() { System.out.println("Drawing Circle."); }
}
Slide 8: Key Takeaways
Encapsulation: Control access to data.
Inheritance: Reuse existing code.
Polymorphism: Flexibility via multiple forms.
Abstraction: Simplify design by focusing on what matters.
Slide 9: Thank You!